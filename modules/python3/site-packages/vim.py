def command(cmd):
    """
    :py vim.command("set tw=72")
    :py vim.command("%s/aaa/bbb/g")
    """
    pass

def eval(exp):
    """
    :py text_width = vim.eval("&tw")
    :py str = vim.eval("12+12")
    """
    pass

def bindeval(exp):
    """
    """
    pass

def strwidth(exp)
    """
    Like |strwidth()|: returns number of display cells str occupies, tab 
    is counted as one cell.
    """
    pakkjjjjkkass

def foreach_rtp(callable):
    """
    Call the given callable for each path in 'runtimepath' until either 
    callable returns something but None, the exception is raised or there 
    are no longer paths. If stopped in case callable returned non-None, 
    vim.foreach_rtp function returns the value returned by callable.
    """
    pass

class VimError(Exception):
    pass

error = VimError()

class VimBuffer():
    def __init__(self):
	self.vars =[]
	self.options= []
	self.name = ""
	self.number=1
	self.valid=True

    def append(line,nr):
        """
	b.append(str)	Append a line to the buffer
	b.append(str, nr)  Idem, below line "nr"
	b.append(list)	Append a list of lines to the buffer
			Note that the option of supplying a list of strings to
			the append method differs from the equivalent method
			for Python's built-in list objects.
	b.append(list, nr)  Idem, below line "nr"
        """
        pass

    def mark(name):
        """
        Return a tuple (row,col) representing the position
	of the named mark (can also get the []"<> marks)
        """
        pass

    def range(s,e):
        """
        Return a range object (see |python-range|) which
        represents the part of the given buffer between line
        numbers s and e |inclusive|.
        """
        pass

buffers = [VimBuffer()]

class VimWindow():
    def __init__(self):
        self.buffer = VimBuffer()
        self.cursor = ""
        self.height = 0
        self.width=0
        self.vars =[]
        self.options=[]
        self.number=0
        self.row=0
        self.col=0
        self.tabpage=VimTabPage()
        self.valid=True

windows = [VimWindow()]

class VimTabPage():
    def __init__(self):
        self.number = 0 
        self.windows = [VimWindow()]
        self.vars = []
        self.window = VimWindow()
        self.valid = True

tabpages = [VimTabPage()]

class VimRange():
    def __init__(self):
        self.start = 0
        self.end = 0

    def append(*args):
        """
        r.append(str)	Append a line to the range
        r.append(str, nr)  Idem, after line "nr"
        r.append(list)	Append a list of lines to the range
        		Note that the option of supplying a list of strings to
        		the append method differs from the equivalent method
        		for Python's built-in list objects.
        r.append(list, nr)  Idem, after line "nr"
        """
        pass

class VimCurrent():
    def __init__(self):
        self.line = "."
        self.buffer = VimBuffer()
        self.window = VimWindow()
        self.tabpage = VimTabPage()
        self.range = VimRange()
    pass

current = VimCurrent()

options = []

vars = []
vvars = []

VIM_SPECIAL_PATH = ""

def find_module():
    pass

def path_hook(path):
    pass

def _get_paths():
    pass

class Dictionary(dict):
    pass

class List(list):
    pass

class Function():
    def __init__(self,name):
        pass
