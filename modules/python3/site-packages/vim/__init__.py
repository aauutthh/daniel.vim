# -*- encoding:utf8 -*-

"""
this module is use for jedi completion
这个模块用于jedi/ycm的自动补全，没有实际运行功能
在vim中执行
:help py3
查看vim模块详细帮助
"""

import typing


# T = typing.TypeVar('T')
# def O(y: T) -> T:
#     return y

class Range():
    start = 0 # type: int
    end = 0   # type: int

    def append(line: typing.Union[str,typing.List[str]], nr: int):
        """
        r.append(str)	Append a line to the range
        r.append(str, nr)  Idem, after line "nr"
        r.append(list)	Append a list of lines to the range
        		Note that the option of supplying a list of strings to
        		the append method differs from the equivalent method
        		for Python's built-in list objects.
        r.append(list, nr)  Idem, after line "nr"
        """
        pass


class Buffer():
    vars = {}    # type: typing.Dict[str,str]
    options ={}  # type: typing.Dict[str,str]
    name = ""    # type: str
    number=1     # type: int
    valid=True   # type: bool

    def append(line: typing.Union[str,typing.List[str]], nr: int):
        """
        b.append(str)	Append a line to the buffer
        b.append(str, nr)  Idem, below line "nr"
        b.append(list)	Append a list of lines to the buffer
        		Note that the option of supplying a list of strings to
        		the append method differs from the equivalent method
        		for Python's built-in list objects.
        b.append(list, nr)  Idem, below line "nr"
        """
        pass

    def mark(name: str) -> typing.Tuple[int ,int]:
        """
        Return a tuple (row,col) representing the position
        of the named mark (can also get the []"<> marks)
        """
        pass

    def range(s: int,e: int) -> Range:
        """
        Return a range object (see |python-range|) which
        represents the part of the given buffer between line
        numbers s and e |inclusive|.
        """
        pass

class Current():
    line = "."      # type: str
    buffer = None   # type: Buffer
    window = None   # type: Window
    tabpage = None  # type: TabPage
    range = None    # type: Range

class TabPage():
    number = 0    # type: int
    vars = {}     # type: typing.Dict[str,str]
    valid = True  # type: bool
    windows = []  # type: typing.List[Window]
    window = None # type: Window

class Window():
    buffer = None     # type: Buffer
    cursor = ()       # type: typing.Tuple[int,int]
    height = 0        # type: int
    width=0           # type: int
    vars = {}         # type: typing.Dict[str,str]
    options ={}       # type: typing.Dict[str,str]
    number=0          # type: int
    row=0             # type: int
    col=0             # type: int
    tabpage = None    # type: TabPage
    valid=True        # type: bool

def command(cmd: str):
    """
    :py vim.command("set tw=72")
    :py vim.command("%s/aaa/bbb/g")
    """
    pass

def eval(exp: str) -> typing.Union[str,int]:
    """
    :py text_width = vim.eval("&tw")
    :py str = vim.eval("12+12")
    """
    return None

def bindeval(exp: str) -> typing.Union[str,int]:
    """
    :py text_width = vim.bindeval("&tw")
    :py str = vim.bindeval("12+12")
    """
    return None

def strwidth(exp: str) -> int:
    """
    Like |strwidth()|: returns number of display cells str occupies, tab 
    is counted as one cell.
    """
    return 0

def foreach_rtp(c: typing.Callable[[str],typing.Any]) -> None:
    """
    Call the given callable for each path in 'runtimepath' until either 
    callable returns something but None, the exception is raised or there 
    are no longer paths. If stopped in case callable returned non-None, 
    vim.foreach_rtp function returns the value returned by callable.
    """
    return NOne

def find_module():
    pass

def path_hook(path):
    pass

def _get_paths():
    pass

error = None           # type: Exception

buffers = []           # type: typing.List[Buffer]

windows = []           # type: typing.List[Window]

tabpages = []          # type: typing.List[TabPage]

current = None         # type: typing.List[Current]

vars = {}              # type: typing.Dict[str,str]

vvars = {}             # type: typing.Dict[str,str]

options ={}            # type: typing.Dict[str,str]

VIM_SPECIAL_PATH = ""  # type: str

