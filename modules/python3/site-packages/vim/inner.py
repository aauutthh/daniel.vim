# -*- encoding:utf8 -*-

"""
this module is use for jedi completion
这个模块用于jedi的自动补全，没有实际运行功能
在vim中执行
:help py3
查看详细帮助
"""


class Dictionary(dict):
    pass

class List(list):
    pass

class Function():
    def __init__(self,name):
        pass

class Error(Exception):
    pass

class Buffer():
    def __init__(self):
	    self.vars = Dictionary()
	    self.options = Dictionary()
	    self.name = ""
	    self.number=1
	    self.valid=True

    def append(line,nr):
        """
        b.append(str)	Append a line to the buffer
        b.append(str, nr)  Idem, below line "nr"
        b.append(list)	Append a list of lines to the buffer
        		Note that the option of supplying a list of strings to
        		the append method differs from the equivalent method
        		for Python's built-in list objects.
        b.append(list, nr)  Idem, below line "nr"
        """
        pass

    def mark(name):
        """
        Return a tuple (row,col) representing the position
        of the named mark (can also get the []"<> marks)
        """
        pass

    def range(s,e):
        """
        Return a range object (see |python-range|) which
        represents the part of the given buffer between line
        numbers s and e |inclusive|.
        """
        pass

class Range():
    def __init__(self):
        self.start = 0
        self.end = 0

    def append(*args):
        """
        r.append(str)	Append a line to the range
        r.append(str, nr)  Idem, after line "nr"
        r.append(list)	Append a list of lines to the range
        		Note that the option of supplying a list of strings to
        		the append method differs from the equivalent method
        		for Python's built-in list objects.
        r.append(list, nr)  Idem, after line "nr"
        """
        pass

class Current():
    def __init__(self, tabpage):
        isinstance(tabpage, TabPage)
        self.line = "."
        self.buffer = Buffer()
        self.windows = tabpage.windows
        self.tabpage = tabpage
        self.range = Range()

class TabPage():
    def __init__(self):
        self.number = 0 
        self.vars = Dictionary()
        self.valid = True

    def __z_window__(self, win): 
        """
        add window
        """
        isinstance(win , Window)
        self.windows = [win]
        self.window = win

class Window():
    def __init__(self,tabpage):
        isinstance(tabpage , TabPage)
        self.buffer = Buffer()
        self.cursor = ""
        self.height = 0
        self.width=0
        self.vars = Dictionary()
        self.options= Dictionary()
        self.number=0
        self.row=0
        self.col=0
        self.tabpage = tabpage
        self.valid=True
        tabpage.__z_window__(self)


G_Tab = TabPage()
G_window = Window(G_Tab)
G_current = Current(G_Tab)
