import typing
# jedi对 typing.Iterable支持度不够 , 使用list对象的__iter__()方法替代
# jedi对 typing.Callable支持度不够 , 使用闭包函数/子函数替代

class Value():
    """
    https://sourceware.org/gdb/current/onlinedocs/gdb/Values-From-Inferior.html#Values-From-Inferior
    """
    address = 0
    is_optimized_out = True
    type = None # type: Type
    dynamic_type = None # type: Type
    is_lazy = True
    def __init__ (self,val,type: Type):
        """
        Many Python values can be converted directly to a gdb.Value via this object initializer. Specifically:

        Python boolean
        A Python boolean is converted to the boolean type from the current language.

        Python integer
        A Python integer is converted to the C long type for the current architecture.

        Python long
        A Python long is converted to the C long long type for the current architecture.

        Python float
        A Python float is converted to the C double type for the current architecture.

        Python string
        A Python string is converted to a target string in the current target language using the current target encoding. If a character cannot be represented in the current target encoding, then an exception is thrown.

        gdb.Value
        If val is a gdb.Value, then a copy of the value is made.

        gdb.LazyString
        If val is a gdb.LazyString (see Lazy Strings In Python), then the lazy string’s value method is called, and its result is used.

        This second form of the gdb.Value constructor returns a gdb.Value of type type where the value contents are taken from the Python buffer object specified by val. The number of bytes in the Python buffer object must be greater than or equal to the size of type.
        """
        pass

    def cast (self, type: Type) :
        """
        Return a new instance of gdb.Value that is the result of casting this instance to the type described by type, which must be a gdb.Type object. If the cast cannot be performed for some reason, this method throws an exception.
        """
        return self 

    def dereference (self):
        """
        For pointer data types, this method returns a new gdb.Value object whose contents is the object pointed to by the pointer. For example, if foo is a C pointer to an int, declared in your C program as

        int *foo;
        then you can use the corresponding gdb.Value to access what foo points to like this:

        bar = foo.dereference ()
        The result bar will be a gdb.Value object holding the value pointed to by foo.

        A similar function Value.referenced_value exists which also returns gdb.Value objects corresonding to the values pointed to by pointer values (and additionally, values referenced by reference values). However, the behavior of Value.dereference differs from Value.referenced_value by the fact that the behavior of Value.dereference is identical to applying the C unary operator * on a given value. For example, consider a reference to a pointer ptrref, declared in your C++ program as

        typedef int *intptr;
        ...
        int val = 10;
        intptr ptr = &val;
        intptr &ptrref = ptr;
        Though ptrref is a reference value, one can apply the method Value.dereference to the gdb.Value object corresponding to it and obtain a gdb.Value which is identical to that corresponding to val. However, if you apply the method Value.referenced_value, the result would be a gdb.Value object identical to that corresponding to ptr.

        py_ptrref = gdb.parse_and_eval ("ptrref")
        py_val = py_ptrref.dereference ()
        py_ptr = py_ptrref.referenced_value ()
        The gdb.Value object py_val is identical to that corresponding to val, and py_ptr is identical to that corresponding to ptr. In general, Value.dereference can be applied whenever the C unary operator * can be applied to the corresponding C value. For those cases where applying both Value.dereference and Value.referenced_value is allowed, the results obtained need not be identical (as we have seen in the above example). The results are however identical when applied on gdb.Value objects corresponding to pointers (gdb.Value objects with type code TYPE_CODE_PTR) in a C/C++ program.
        """
        return self

    def referenced_value (self):
        """
        For pointer or reference data types, this method returns a new gdb.Value object corresponding to the value referenced by the pointer/reference value. For pointer data types, Value.dereference and Value.referenced_value produce identical results. The difference between these methods is that Value.dereference cannot get the values referenced by reference values. For example, consider a reference to an int, declared in your C++ program as

        int val = 10;
        int &ref = val;
        then applying Value.dereference to the gdb.Value object corresponding to ref will result in an error, while applying Value.referenced_value will result in a gdb.Value object identical to that corresponding to val.

        py_ref = gdb.parse_and_eval ("ref")
        er_ref = py_ref.dereference ()       # Results in error
        py_val = py_ref.referenced_value ()  # Returns the referenced value
        The gdb.Value object py_val is identical to that corresponding to val.
        """
        return self

    def reference_value (self):
        """
        Return a gdb.Value object which is a reference to the value encapsulated by this instance.
        """
        return self

    def const_value (self):
        """
        Return a gdb.Value object which is a const version of the value encapsulated by this instance.
        """
        return self

    def dynamic_cast (self,type):
        """
        Like Value.cast, but works as if the C++ dynamic_cast operator were used. Consult a C++ reference for details.
        """
        return self

    def reinterpret_cast (self,type):
        """
        Like Value.cast, but works as if the C++ reinterpret_cast operator were used. Consult a C++ reference for details.
        """
        return self

    def string (self,encoding, errors, length) -> str:
        """
        If this gdb.Value represents a string, then this method converts the contents to a Python string. Otherwise, this method will throw an exception.

        Values are interpreted as strings according to the rules of the current language. If the optional length argument is given, the string will be converted to that length, and will include any embedded zeroes that the string may contain. Otherwise, for languages where the string is zero-terminated, the entire string will be converted.

        For example, in C-like languages, a value is a string if it is a pointer to or an array of characters or ints of type wchar_t, char16_t, or char32_t.

        If the optional encoding argument is given, it must be a string naming the encoding of the string in the gdb.Value, such as "ascii", "iso-8859-6" or "utf-8". It accepts the same encodings as the corresponding argument to Python’s string.decode method, and the Python codec machinery will be used to convert the string. If encoding is not given, or if encoding is the empty string, then either the target-charset (see Character Sets) will be used, or a language-specific encoding will be used, if the current language is able to supply one.

        The optional errors argument is the same as the corresponding argument to Python’s string.decode method.

        If the optional length argument is given, the string will be fetched and converted to the given length.
        """
        return ""

    def lazy_string (self,encoding , length) -> str:
        """
        If this gdb.Value represents a string, then this method converts the contents to a gdb.LazyString (see Lazy Strings In Python). Otherwise, this method will throw an exception.

        If the optional encoding argument is given, it must be a string naming the encoding of the gdb.LazyString. Some examples are: ‘ascii’, ‘iso-8859-6’ or ‘utf-8’. If the encoding argument is an encoding that GDB does recognize, GDB will raise an error.

        When a lazy string is printed, the GDB encoding machinery is used to convert the string during printing. If the optional encoding argument is not provided, or is an empty string, GDB will automatically select the encoding most suitable for the string type. For further information on encoding in GDB please see Character Sets.

        If the optional length argument is given, the string will be fetched and encoded to the length of characters specified. If the length argument is not provided, the string will be fetched and encoded until a null of appropriate width is found.
        """
        return ""

    def fetch_lazy (self) :
        """
        If the gdb.Value object is currently a lazy value (gdb.Value.is_lazy is True), then the value is fetched from the inferior. Any errors that occur in the process will produce a Python exception.

        If the gdb.Value object is not a lazy value, this method has no effect.

        This method does not return a value.
        """
        return self
    
    # end of class Value

class Field():
        
    bitpos = 0 # type: int
    enumval = 0 # type: int
    name = "" # type: str
    artificial = True # type: bool
    is_base_class = True # type: bool
    bitsize = 0 # type: int
    type = None # type: Type
    parent_type = None # type: Type

    # end of class Field


class Type():
    """
    https://sourceware.org/gdb/current/onlinedocs/gdb/Types-In-Python.html#Types-In-Python
    """
    alignof = 0
    code = 0
    name = ""
    sizeof = 0
    tag = ""

    def fields (self) -> typing.List[Field]:
        """
        For structure and union types, this method returns the fields. Range types have two fields, the minimum and maximum values. Enum types have one field per enum constant. Function and method types have one field per parameter. The base types of C++ classes are also represented as fields. If the type has no fields, or does not fit into one of these categories, an empty sequence will be returned.

        Each field is a gdb.Field object, with some pre-defined attributes:

        bitpos
        This attribute is not available for enum or static (as in C++) fields. The value is the position, counting in bits, from the start of the containing type.

        enumval
        This attribute is only available for enum fields, and its value is the enumeration member’s integer representation.

        name
        The name of the field, or None for anonymous fields.

        artificial
        This is True if the field is artificial, usually meaning that it was provided by the compiler and not the user. This attribute is always provided, and is False if the field is not artificial.

        is_base_class
        This is True if the field represents a base class of a C++ structure. This attribute is always provided, and is False if the field is not a base class of the type that is the argument of fields, or if that type was not a C++ class.

        bitsize
        If the field is packed, or is a bitfield, then this will have a non-zero value, which is the size of the field in bits. Otherwise, this will be zero; in this case the field’s size is given by its type.

        type
        The type of the field. This is usually an instance of Type, but it can be None in some situations.

        parent_type
        The type which contains this field. This is an instance of gdb.Type.
        """
        return []

    def array (self,n1 , n2):
        """
        Return a new gdb.Type object which represents an array of this type. If one argument is given, it is the inclusive upper bound of the array; in this case the lower bound is zero. If two arguments are given, the first argument is the lower bound of the array, and the second argument is the upper bound of the array. An array’s length must not be negative, but the bounds can be.
        """
        return self

    def vector (self,n1 , n2):
        """
        Return a new gdb.Type object which represents a vector of this type. If one argument is given, it is the inclusive upper bound of the vector; in this case the lower bound is zero. If two arguments are given, the first argument is the lower bound of the vector, and the second argument is the upper bound of the vector. A vector’s length must not be negative, but the bounds can be.

        The difference between an array and a vector is that arrays behave like in C: when used in expressions they decay to a pointer to the first element whereas vectors are treated as first class values.
        """
        return self

    def const (self):
        """
        Return a new gdb.Type object which represents a const-qualified variant of this type.
        """
        return self

    def volatile (self):
        """
        Return a new gdb.Type object which represents a volatile-qualified variant of this type.
        """
        return self

    def unqualified (self):
        """
        Return a new gdb.Type object which represents an unqualified variant of this type. That is, the result is neither const nor volatile.
        """
        return self

    def range (self) -> typing.Tuple[int,int]:
        """
        Return a Python Tuple object that contains two elements: the low bound of the argument type and the high bound of that type. If the type does not have a range, GDB will raise a gdb.error exception (see Exception Handling).
        """
        return (1,0)

    def reference (self):
        """
        Return a new gdb.Type object which represents a reference to this type.
        """
        return self

    def pointer (self):
        """
        Return a new gdb.Type object which represents a pointer to this type.
        """
        return self

    def strip_typedefs (self):
        """
        Return a new gdb.Type that represents the real type, after removing all layers of typedefs.
        """
        return self

    def target (self):
        """
        Return a new gdb.Type object which represents the target type of this type.

        For a pointer type, the target type is the type of the pointed-to object. For an array type (meaning C-like arrays), the target type is the type of the elements of the array. For a function or method type, the target type is the type of the return value. For a complex type, the target type is the type of the elements. For a typedef, the target type is the aliased type.

        If the type does not have a target, this method will throw an exception.
        """
        return self

    def template_argument (self,n, block) -> typing.Union[Value, Type]:
        """
        If this gdb.Type is an instantiation of a template, this will return a new gdb.Value or gdb.Type which represents the value of the nth template argument (indexed starting at 0).

        If this gdb.Type is not a template type, or if the type has fewer than n template arguments, this will throw an exception. Ordinarily, only C++ code will have template types.

        If block is given, then name is looked up in that scope. Otherwise, it is searched for globally.
        """
        return self

    def optimized_out (self) -> Value:
        """
        Return gdb.Value instance of this type whose value is optimized out. This allows a frame decorator to indicate that the value of an argument or a local variable is not known.

        Each type has a code, which indicates what category this type falls into. The available type categories are represented by constants defined in the gdb module:
        """
        return None

    #end of class Type

TYPE_CODE_PTR = 0
TYPE_CODE_ARRAY = 0
TYPE_CODE_STRUCT = 0
TYPE_CODE_UNION = 0
TYPE_CODE_ENUM = 0
TYPE_CODE_FLAGS = 0
TYPE_CODE_FUNC = 0
TYPE_CODE_INT = 0
TYPE_CODE_FLT = 0
TYPE_CODE_VOID = 0
TYPE_CODE_SET = 0
TYPE_CODE_RANGE = 0
TYPE_CODE_STRING = 0
TYPE_CODE_BITSTRING = 0
TYPE_CODE_ERROR = 0
TYPE_CODE_METHOD = 0
TYPE_CODE_METHODPTR = 0
TYPE_CODE_MEMBERPTR = 0
TYPE_CODE_REF = 0
TYPE_CODE_RVALUE_REF = 0
TYPE_CODE_CHAR = 0
TYPE_CODE_BOOL = 0
TYPE_CODE_COMPLEX = 0
TYPE_CODE_TYPEDEF = 0
TYPE_CODE_NAMESPACE = 0
TYPE_CODE_DECFLOAT = 0
TYPE_CODE_INTERNAL_FUNCTION = 0

def lookup_type(name: str) -> Type:
    """
    This function looks up a type by its name, which must be a string.

    If block is given, then name is looked up in that scope. Otherwise, it is searched for globally.

    Ordinarily, this function will return an instance of gdb.Type. If the named type cannot be found, it will throw an exception.
    """
    return None

class PrettyPrinter():
    """
    https://sourceware.org/gdb/current/onlinedocs/gdb/Pretty-Printing-API.html#Pretty-Printing-API
    """

    # iterable支持度不够
    def children (self) -> typing.Iterable[typing.Tuple[int,str]]:
        """
        GDB will call this method on a pretty-printer to compute the children of the pretty-printer’s value.

        This method must return an object conforming to the Python iterator protocol. Each item returned by the iterator must be a tuple holding two elements. The first element is the “name” of the child; the second element is the child’s value. The value can be any Python object which is convertible to a GDB value.

        This method is optional. If it does not exist, GDB will act as though the value has no children.
        """
        return ["name","value"].__iter__()


    def display_hint (self) -> str:
        """
        The CLI may call this method and use its result to change the formatting of a value. The result will also be supplied to an MI consumer as a ‘displayhint’ attribute of the variable being printed.

        This method is optional. If it does exist, this method must return a string.

        Some display hints are predefined by GDB:

        ‘array’
        Indicate that the object being printed is “array-like”. The CLI uses this to respect parameters such as set print elements and set print array.

        ‘map’
        Indicate that the object being printed is “map-like”, and that the children of this value can be assumed to alternate between keys and values.

        ‘string’
        Indicate that the object being printed is “string-like”. If the printer’s to_string method returns a Python string of some kind, then GDB will call its internal language-specific string-printing function to format the string. For the CLI this means adding quotation marks, possibly escaping some characters, respecting set print elements, and the like.
        """
    return "string"

    def to_string(self) -> str:
        return ""

def pretty_printer(v: int) -> PrettyPrinter:
    return None

class Progspace():
    """
    https://sourceware.org/gdb/current/onlinedocs/gdb/Progspaces-In-Python.html
    """
    filename = "" # type: str

    pretty_printers = [pretty_printer] # type: typing.List[pretty_printer]


class Symtab():
    """
    TODO:
    """
    pass

class Symbol():
    """
    https://sourceware.org/gdb/current/onlinedocs/gdb/Symbols-In-Python.html#Symbols-In-Python
    """

    type = None # type: Type
    """
    The type of the symbol or None if no type is recorded. This attribute is represented as a gdb.Type object. See Types In Python. This attribute is not writable.
    """

    symtab = None # type: Symtab
    """
    The symbol table in which the symbol appears. This attribute is represented as a gdb.Symtab object. See Symbol Tables In Python. This attribute is not writable.
    """

    line = 0 # type: int
    """
    The line number in the source code at which the symbol was defined. This is an integer.
    """

    name = "" # type: str
    """
    The name of the symbol as a string. This attribute is not writable.
    """

    linkage_name = "" # type: str
    """
    The name of the symbol, as used by the linker (i.e., may be mangled). This attribute is not writable.
    """

    print_name = "" # type: str
    """
    The name of the symbol in a form suitable for output. This is either name or linkage_name, depending on whether the user asked GDB to display demangled or mangled names.
    """

    addr_class = 0 # type: int
    """
    The address class of the symbol. This classifies how to find the value of a symbol. Each address class is a constant defined in the gdb module and described later in this chapter.
    """

    needs_frame = True # type: bool
    """
    This is True if evaluating this symbol’s value requires a frame (see Frames In Python) and False otherwise. Typically, local variables will require a frame, but other symbols will not.
    """

    is_argument = True # type: bool
    """
    True if the symbol is an argument of a function.
    """

    is_constant = True # type: bool
    """
    True if the symbol is a constant.
    """

    is_function = True # type: bool
    """
    True if the symbol is a function or a method.
    """

    is_variable = True # type: bool
    """
    True if the symbol is a variable.
    """

    def is_valid () -> bool:
        """
        Returns True if the gdb.Symbol object is valid, False if not. A gdb.Symbol object can become invalid if the symbol it refers to does not exist in GDB any longer. All other gdb.Symbol methods will throw an exception if it is invalid at the time the method is called.
        """
        return True

    def value (frame: int) -> Value:
        """
        Compute the value of the symbol, as a gdb.Value. For functions, this computes the address of the function, cast to the appropriate type. If the symbol requires a frame in order to compute its value, then frame must be given. If frame is not given, or if frame is invalid, then this method will throw an exception.
        """
        return None

    # end of class Symbol

SYMBOL_UNDEF_DOMAIN = 0
SYMBOL_VAR_DOMAIN = 0
SYMBOL_STRUCT_DOMAIN = 0
SYMBOL_LABEL_DOMAIN = 0
SYMBOL_MODULE_DOMAIN = 0
SYMBOL_COMMON_BLOCK_DOMAIN = 0
SYMBOL_LOC_UNDEF = 0
SYMBOL_LOC_CONST = 0
SYMBOL_LOC_STATIC = 0
SYMBOL_LOC_REGISTER = 0
SYMBOL_LOC_ARG = 0
SYMBOL_LOC_REF_ARG = 0
SYMBOL_LOC_REGPARM_ADDR = 0
SYMBOL_LOC_LOCAL = 0
SYMBOL_LOC_TYPEDEF = 0
SYMBOL_LOC_BLOCK = 0
SYMBOL_LOC_CONST_BYTES = 0
SYMBOL_LOC_UNRESOLVED = 0
SYMBOL_LOC_OPTIMIZED_OUT = 0
SYMBOL_LOC_COMPUTED = 0
SYMBOL_LOC_COMPUTED = 0

def lookup_symbol (name: str, block: str , domain: str) -> typing.Tuple[Symbol,bool]:
    """
    This function searches for a symbol by name. The search scope can be restricted to the parameters defined in the optional domain and block arguments.
    
    name is the name of the symbol. It must be a string. The optional block argument restricts the search to symbols visible in that block. The block argument must be a gdb.Block object. If omitted, the block for the current frame is used. The optional domain argument restricts the search to the domain type. The domain argument must be a domain constant defined in the gdb module and described later in this chapter.
    
    The result is a tuple of two elements. The first element is a gdb.Symbol object or None if the symbol is not found. If the symbol is found, the second element is True if the symbol is a field of a method’s object (e.g., this in C++), otherwise it is False. If the symbol is not found, the second element is False.
    """
    return None,False

def lookup_global_symbol (name: str , domain: str) -> Symbol:
    """
    This function searches for a global symbol by name. The search scope can be restricted to by the domain argument.
    
    name is the name of the symbol. It must be a string. The optional domain argument restricts the search to the domain type. The domain argument must be a domain constant defined in the gdb module and described later in this chapter.
    
    The result is a gdb.Symbol object or None if the symbol is not found.
    """
    return None

def lookup_static_symbol (name: str, domain: str) -> Symbol:
    """
    This function searches for a global symbol with static linkage by name. The search scope can be restricted to by the domain argument.
    
    name is the name of the symbol. It must be a string. The optional domain argument restricts the search to the domain type. The domain argument must be a domain constant defined in the gdb module and described later in this chapter.
    
    The result is a gdb.Symbol object or None if the symbol is not found.
    
    Note that this function will not find function-scoped static variables. To look up such variables, iterate over the variables of the function’s gdb.Block and check that block.addr_class is gdb.SYMBOL_LOC_STATIC.
    """
    return None

class Objfile():
    """
    https://sourceware.org/gdb/current/onlinedocs/gdb/Objfiles-In-Python.html
    """

    filename = "" # type: str
    """
    The file name of the objfile as a string, with symbolic links resolved.
    
    The value is None if the objfile is no longer valid. See the gdb.Objfile.is_valid method, described below.
    """

    username = "" # type: str
    """
    The file name of the objfile as specified by the user as a string.
    
    The value is None if the objfile is no longer valid. See the gdb.Objfile.is_valid method, described below.
    """

    owner = "" # type: str
    """
    For separate debug info objfiles this is the corresponding gdb.Objfile object that debug info is being provided for. Otherwise this is None. Separate debug info objfiles are added with the gdb.Objfile.add_separate_debug_file method, described below.
    """
    
    build_id = 0 # type: int
    """
    The build ID of the objfile as a string. If the objfile does not have a build ID then the value is None.
    
    This is supported only on some operating systems, notably those which use the ELF format for binary files and the GNU Binutils. For more details about this feature, see the description of the --build-id command-line option in Command Line Options in The GNU Linker.
    """

    progspace = [] # type: typing.List[Progspace]
    """
    The containing program space of the objfile as a gdb.Progspace object. See Progspaces In Python.
    """

    pretty_printers = [pretty_printer] # type: typing.List[pretty_printer]
    """
    The pretty_printers attribute is a list of functions. It is used to look up pretty-printers. A Value is passed to each function in order; if the function returns None, then the search continues. Otherwise, the return value should be an object which is used to format the value. See Pretty Printing API, for more information.
    """

    type_printers = [] # type: typing.List[PrettyPrinter]
    """
    The type_printers attribute is a list of type printer objects. See Type Printing API, for more information.
    """

    frame_filters = [] # 
    """
    TODO:
    https://sourceware.org/gdb/current/onlinedocs/gdb/Frame-Filter-API.html#Frame-Filter-API
    """

    def is_valid () -> bool:
        """
        Returns True if the gdb.Objfile object is valid, False if not. A gdb.Objfile object can become invalid if the object file it refers to is not loaded in GDB any longer. All other gdb.Objfile methods will throw an exception if it is invalid at the time the method is called.
        """
        return True
    
    def add_separate_debug_file (filename: str):
        """
        Add file to the list of files that GDB will search for debug information for the objfile. This is useful when the debug info has been removed from the program and stored in a separate file. GDB has built-in support for finding separate debug info files (see Separate Debug Files), but if the file doesn’t live in one of the standard places that GDB searches then this function can be used to add a debug info file from a different place.
        """
        return None
    
    def lookup_global_symbol (name: str , domain: str) -> Symbol:
        """
        Search for a global symbol named name in this objfile. Optionally, the search scope can be restricted with the domain argument. The domain argument must be a domain constant defined in the gdb module and described in Symbols In Python. This function is similar to gdb.lookup_global_symbol, except that the search is limited to this objfile.
        
        The result is a gdb.Symbol object or None if the symbol is not found.
        """
        return None
    
    def lookup_static_symbol (name: str , domain: str) -> Symbol:
        """
        Like Objfile.lookup_global_symbol, but searches for a global symbol with static linkage named name in this objfile.
        """
        return None

    pass

def current_objfile():
    return None

def current_progspace() -> Progspace:
    return None 

def progspaces() -> typing.List[Progspace]:
    return []


# --------------------------------------

class MemoryError():
    pass

class Command():
    """
    need implement two interface
    def __init__(self,...)
    def invoke (self, arg, from_tty):
    https://sourceware.org/gdb/current/onlinedocs/gdb/Commands-In-Python.html#Commands-In-Python
    """

    def __init__ (self, command_class: str, complete_class: int..., prefix: True):
        """
        ex:
        super().__init__("demos describetype", gdb.COMMAND_SUPPORT, gdb.COMPLETE_FILENAME)

        The object initializer for Command registers the new command with GDB. This initializer is normally invoked from the subclass’ own __init__ method.

        name is the name of the command. If name consists of multiple words, then the initial words are looked for as prefix commands. In this case, if one of the prefix commands does not exist, an exception is raised.

        There is no support for multi-line commands.

        command_class should be one of the ‘COMMAND_’ constants defined below. This argument tells GDB how to categorize the new command in the help system.

        completer_class is an optional argument. If given, it should be one of the ‘COMPLETE_’ constants defined below. This argument tells GDB how to perform completion for this command. If not given, GDB will attempt to complete using the object’s complete method (see below); if no such method is found, an error will occur when completion is attempted.

        prefix is an optional argument. If True, then the new command is a prefix command; sub-commands of this command may be registered.

        The help text for the new command is taken from the Python documentation string for the command’s class, if there is one. If no documentation string is provided, the default value “This command is not documented.” is used.
        """
        pass

    def dont_repeat (self):
        """
        By default, a GDB command is repeated when the user enters a blank line at the command prompt. A command can suppress this behavior by invoking the dont_repeat method. This is similar to the user command dont-repeat, see dont-repeat.
        """
        pass

    def invoke (self, arg, from_tty: bool):
        """
        This method is called by GDB when this command is invoked.

        argument is a string. It is the argument to the command, after leading and trailing whitespace has been stripped.

        from_tty is a boolean argument. When true, this means that the command was entered by the user at the terminal; when false it means that the command came from elsewhere.

        If this method throws an exception, it is turned into a GDB error call. Otherwise, the return value is ignored.

        To break argument up into an argv-like string use gdb.string_to_argv. This function behaves identically to GDB’s internal argument lexer buildargv. It is recommended to use this for consistency. Arguments are separated by spaces and may be quoted. Example:

        print gdb.string_to_argv ("1 2\ \\\"3 '4 \"5' \"6 '7\"")
        ['1', '2 "3', '4 "5', "6 '7"]
        """
        pass

    def complete (self, text: str, word: str) -> typing.List[str]:
        """
        This method is called by GDB when the user attempts completion on this command. All forms of completion are handled by this method, that is, the TAB and M-? key bindings (see Completion), and the complete command (see complete).

        The arguments text and word are both strings; text holds the complete command line up to the cursor’s location, while word holds the last word of the command line; this is computed using a word-breaking heuristic.

        The complete method can return several values:

        If the return value is a sequence, the contents of the sequence are used as the completions. It is up to complete to ensure that the contents actually do complete the word. A zero-length sequence is allowed, it means that there were no completions available. Only string elements of the sequence are used; other elements in the sequence are ignored.
        If the return value is one of the ‘COMPLETE_’ constants defined below, then the corresponding GDB-internal completion function is invoked, and its result is used.
        All other results are treated as though there were no available completions.
        """
        pass



class GdbError():
    """
    When thrown from a command or function, this exception will cause the command or function to fail, but the Python stack will not be displayed. GDB does not throw this exception itself, but rather recognizes it when thrown from user Python code. Example:
    
    (gdb) python
    >class HelloWorld (gdb.Command):
    >  """Greet the whole world."""
    >  def __init__ (self):
    >    super (HelloWorld, self).__init__ ("hello-world", gdb.COMMAND_USER)
    >  def invoke (self, args, from_tty):
    >    argv = gdb.string_to_argv (args)
    >    if len (argv) != 0:
    >      raise gdb.GdbError ("hello-world takes no arguments")
    >    print "Hello, World!"
    >HelloWorld ()
    >end
    (gdb) hello-world 42
    hello-world takes no arguments
    """
    pass

def invalidate_cached_frames():
    pass

def objfiles():
    pass

def selected_frame():
    pass

def string_to_argv(argv: str) -> typing.List[str]:
    return None


SIGTRAMP_FRAME = 0
SYMBOL_LOC_ARG = 0
SYMBOL_LOC_COMPUTED = 0
SYMBOL_LOC_LOCAL = 0
SYMBOL_LOC_REF_ARG = 0
SYMBOL_LOC_REGISTER = 0
SYMBOL_LOC_REGPARM_ADDR = 0
SYMBOL_LOC_STATIC = 0

VERSION = 0
TYPE_CODE_ARRAY = 0
TYPE_CODE_BOOL = 0
TYPE_CODE_CHAR = 0
TYPE_CODE_ENUM = 0
TYPE_CODE_FLT = 0
TYPE_CODE_INT = 0
TYPE_CODE_PTR = 0
TYPE_CODE_REF = 0
TYPE_CODE_STRUCT = 0
TYPE_CODE_TYPEDEF = 0
TYPE_CODE_UNION = 0
TYPE_CODE_VOID = 0

COMMAND_NONE = 0
COMMAND_RUNNING = 0
COMMAND_DATA = 0
COMMAND_STACK = 0
COMMAND_FILES = 0
COMMAND_SUPPORT = 0
COMMAND_STAUTS = 0
COMMAND_BREAKPOINTS = 0
COMMAND_TRACEPOINTS = 0
COMMAND_USER = 0
COMMAND_OBSCURE = 0
COMMAND_MAINTENANCE = 0

COMPLETE_NONE  = 0 
COMPLETE_FILENAME = 0
COMPLETE_LOCATION = 0
COMPLETE_COMMAND = 0
COMPLETE_SYMBOL = 0
COMPLETE_EXPRESSION = 0

DUMMY_FRAME = 0


# 以下内容来自 https://sourceware.org/gdb/onlinedocs/gdb/Basic-Python.html#Basic-Python
PYTHONDIR = ""
"""
A string containing the python directory (see Python).
"""

def execute (command: str , from_tty , to_string):
    """
    Evaluate *command*, a string, as a GDB CLI command. If a GDB exception happens while command runs, it is translated as described in Exception Handling.
    
    The *from_tty* flag specifies whether GDB ought to consider this command as having originated from the user invoking it interactively. It must be a boolean value. If omitted, it defaults to False.
    
    By default, any output produced by command is sent to GDB’s standard output (and to the log output if logging is turned on). If the *to_string* parameter is True, then output will be collected by gdb.execute and returned as a string. The default is False, in which case the return value is None. If *to_string* is True, the GDB virtual terminal will be temporarily set to unlimited width and height, and its pagination will be disabled; see Screen Size.
    """
    return None

class Breakpoint():
    """
    TODO:
    """
    pass

def breakpoints () -> typing.List[Breakpoint]:
    """
    Return a sequence holding all of GDB’s breakpoints. See Breakpoints In Python, for more information. In GDB version 7.11 and earlier, this function returned None if there were no breakpoints. This peculiarity was subsequently fixed, and now gdb.breakpoints returns an empty sequence in this case.
    """
    return []

def rbreak (regex: str , minsyms , throttle, symtabs ) -> typing.List[Breakpoint]:
    """
    Return a Python list holding a collection of newly set gdb.Breakpoint objects matching function names defined by the *regex* pattern. If the *minsyms* keyword is True, all system functions (those not explicitly defined in the inferior) will also be included in the match. The *throttle* keyword takes an integer that defines the maximum number of pattern matches for functions matched by the *regex* pattern. If the number of matches exceeds the integer value of *throttle*, a RuntimeError will be raised and no breakpoints will be created. If *throttle* is not defined then there is no imposed limit on the maximum number of matches and breakpoints to be created. The symtabs keyword takes a Python iterable that yields a collection of gdb.Symtab objects and will restrict the search to those functions only contained within the gdb.Symtab objects.
    """
    return  []

def parameter (parameter) -> Value:
    """
    Return the value of a GDB *parameter* given by its name, a string; the parameter name string may contain spaces if the parameter has a multi-part name. For example, ‘print object’ is a valid parameter name.
    
    If the named *parameter* does not exist, this function throws a gdb.error (see Exception Handling). Otherwise, the parameter’s value is converted to a Python value of the appropriate type, and returned.
    """
    return None

def history (number):
    """
    Return a value from GDB’s value history (see Value History). The number argument indicates which history element to return. If number is negative, then GDB will take its absolute value and count backward from the last element (i.e., the most recent element) to find the value to return. If number is zero, then GDB will return the most recent element. If the element specified by number doesn’t exist in the value history, a gdb.error exception will be raised.
    
    If no exception is raised, the return value is always an instance of gdb.Value (see Values From Inferior).
    """
    pass

def convenience_variable (name) -> Value:
    """
    Return the value of the convenience variable (see Convenience Vars) named name. name must be a string. The name should not include the ‘$’ that is used to mark a convenience variable in an expression. If the convenience variable does not exist, then None is returned.
    """
    return None

def set_convenience_variable (name, value):
    """
    set_convenience_variable (name: str, value: int) -> int
    Set the *value* of the convenience variable (see Convenience Vars) named name. *name* must be a string. The name should not include the ‘$’ that is used to mark a convenience variable in an expression. If value is None, then the convenience variable is removed. Otherwise, if value is not a gdb.Value (see Values From Inferior), it is is converted using the gdb.Value constructor.
    """
    pass

def parse_and_eval (expression) -> Value:
    """
    Parse expression, which must be a string, as an expression in the current language, evaluate it, and return the result as a gdb.Value.
    
    This function can be useful when implementing a new command (see Commands In Python), as it provides a way to parse the command’s argument as an expression. It is also useful simply to compute values.
    """
    return None

class Symtab_and_line():
    """
    TODO:
    https://sourceware.org/gdb/current/onlinedocs/gdb/Symbol-Tables-In-Python.html#Symbol-Tables-In-Python
    """
    pass

def find_pc_line (pc) -> Symtab_and_line:
    """
    Return the gdb.Symtab_and_line object corresponding to the pc value. See Symbol Tables In Python. If an invalid value of pc is passed as an argument, then the symtab and line attributes of the returned gdb.Symtab_and_line object will be None and 0 respectively. This is identical to gdb.current_progspace().find_pc_line(pc) and is included for historical compatibility.
    """
    return None

def post_event (event):
    """
    Put event, a callable object taking no arguments, into GDB’s internal event queue. This callable will be invoked at some later point, during GDB’s event processing. Events posted using post_event will be run in the order in which they were posted; however, there is no way to know when they will be processed relative to other events inside GDB.
    
    GDB is not thread-safe. If your Python program uses multiple threads, you must be careful to only call GDB-specific functions in the GDB thread. post_event ensures this. For example:
    
    (gdb) python
    >import threading
    >
    >class Writer():
    > def __init__(self, message):
    >        self.message = message;
    > def __call__(self):
    >        gdb.write(self.message)
    >
    >class MyThread1 (threading.Thread):
    > def run (self):
    >        gdb.post_event(Writer("Hello "))
    >
    >class MyThread2 (threading.Thread):
    > def run (self):
    >        gdb.post_event(Writer("World\n"))
    >
    >MyThread1().start()
    >MyThread2().start()
    >end
    (gdb) Hello World
    """
    pass

def write (string , stream):
    """
    Print a string to GDB’s paginated output stream. The optional stream determines the stream to print to. The default stream is GDB’s standard output stream. Possible stream values are:
    
    gdb.STDOUT
    GDB’s standard output stream.
    
    gdb.STDERR
    GDB’s standard error stream.
    
    gdb.STDLOG
    GDB’s log stream (see Logging Output).
    
    Writing to sys.stdout or sys.stderr will automatically call this function and will automatically direct the output to the relevant stream.
    """
    pass

def flush ():
    """
    Flush the buffer of a GDB paginated stream so that the contents are displayed immediately. GDB will flush the contents of a stream automatically when it encounters a newline in the buffer. The optional stream determines the stream to flush. The default stream is GDB’s standard output stream. Possible stream values are:
    """
    pass

STDOUT = sys.stdout
STDERR = sys.stderr
STDLOG = sys.stdout

def target_charset () -> str:
    """
    Return the name of the current target character set (see Character Sets). This differs from gdb.parameter('target-charset') in that ‘auto’ is never returned.
    """
    return ""

def target_wide_charset () -> str:
    """
    Return the name of the current target wide character set (see Character Sets). This differs from gdb.parameter('target-wide-charset') in that ‘auto’ is never returned.
    """
    return ""

def solib_name (address) -> str:
    """
    Return the name of the shared library holding the given address as a string, or None. This is identical to gdb.current_progspace().solib_name(address) and is included for historical compatibility.
    """
    return ""

def decode_line (expression):
    """
    Return locations of the line specified by *expression*, or of the current line if no argument was given. This function returns a Python tuple containing two elements. The first element contains a string holding any unparsed section of expression (or None if the expression has been fully parsed). The second element contains either None or another tuple that contains all the locations that match the expression represented as gdb.Symtab_and_line objects (see Symbol Tables In Python). If expression is provided, it is decoded the way that GDB’s inbuilt break or edit commands do (see Specify Location).
    """
    pass

def prompt_hook (current_prompt):
    """
    If prompt_hook is callable, GDB will call the method assigned to this operation before a prompt is displayed by GDB.
    
    The parameter current_prompt contains the current GDB prompt. This method must return a Python string, or None. If a string is returned, the GDB prompt will be set to that string. If None is returned, GDB will continue to use the current prompt.
    
    Some prompts cannot be substituted in GDB. Secondary prompts such as those used by readline for command input, and annotation related prompts are prohibited from being changed.
    """
    pass


def default_visualizer (value: Value) -> PrettyPrinter:
    """
    This function takes a gdb.Value object as an argument. If a pretty-printer for this value exists, then it is returned. If no such printer exists, then this returns None.
    """
    return None
